Related D3FEND Techniques;Definition;How it works;Considerations;Implementations;Examples
D3-ANCI Authentication Cache Invalidation;Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.;Applications can locally cache user authentication credentials for certain server connections. An application may attempt to use the cached credential for a connection. If the cached credentials exist then the user will not be typically prompted for new credentials.;Are these cached credentials only on the local host? Can they be persisted to the remote server?;None;Windows Credential Management API
D3-MAC Mandatory Access Control;Controlling access to local computer system resources with kernel-level capabilities.;Mandatory access control is a non-discretionary access control system because the rules and polices that determine access is determined by a security control authority and not distributed to local users. Access determinations are based on designed access control polices and are not based on local resource owner determinations. Access is typically granted by defining sets of subjects and sets of objects. Subjects are the entities requesting access and objects are the resources that subjects are trying to access. Rules and policies are defined that associate subjects and object permissions and access controls.;None;Some implementations of security label mandatory access control contain complex rules set that are hard to verify and complex to maintain over time. Initial planning of access model and continuous monitoring of the available users, resources and object is necessary;Linux C-Groups, and Policy engines like SELinux, Windows Mandatory Integrity Control introduced in Windows Vista
D3-DNSDL DNS Denylisting;Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.;Rules are implemented that filter DNS queries using criteria such as Client subnet, Type of network protocol used in query, Fully qualified domain name (FQDN) of record in the query, DNS Server IP address that received the DNS request, Type of DNS record being queried, Time of day the query is received, Size of the Response;Implementation considerations for DNS filtering policies to avoid over-blocking or under-blocking domains. Continuous maintenance of unauthorized domain lists is needed to keep up to date with possible site content changes. File sharing or content delivery networks may require other filtering techniques that are more fine-grained (URL blocking). Access to malicious websites or other network resources directly by IP instead of by DNS record, or after alteration of local DNS hosts file, may not result in DNS network traffic.;None;None
D3-ITF Inbound Traffic Filtering;Restricting network traffic originating from untrusted networks destined towards a private host or enclave.;Inbound Traffic, in this context, is network traffic originating from an untrusted network towards a private host or enclave. For example: An untrusted network host connecting to a internal commercial portal, shopping.example.com, An external mail server connecting to an internal mail server, mail.example.com. Filtering policies are developed by administrators to meet business requirements and limit connectivity. These policies are implemented on edge devices such as firewalls, routers, and intrusion prevention systems. Examples of filters: Blocking incoming traffic from spoofed internally facing IP addresses, Blocking specific ports and services from establishing Connections, Limiting specific IP ranges from connecting to the network, Dynamic inbound filtering (Hole punching, STUN, NAT-T);Business requirements typically drive the development of filtering rulesets. Protocols using non-standard ports may circumvent filtering technology, which does not detect application protocol based on traffic Content;OpenWRT, Netfilter (Linux), Windows Firewall;None
D3-UA URL Analysis;Determining if a URL is benign or malicious by analyzing the URL or its components.;URLs may contain components, like scheme, userinfo, host Name, port, path, query or Fragment. These components are used as features in analysis algorithms. Contextual information about a URL such as where it is embedded (ex. emails, files, network protocols), header, path, location, and origin information, as well as information about the content returned from the URL request, may be incorporated into an analytic for URL analysis. For example, if a URL indicates a .pdf file but an executable is actually returned, the combination of these two pieces of information indicates suspicious activity.;Volume of URLs being analyzed, combined with the speed at which they are analyzed, Fidelity of analysis technique at detecting brand new URLs versus analyzing URLs of established Domains;None;None
D3-DLIC Driver Load Integrity Checking;Ensuring the integrity of drivers loaded during initialization of the operating system.;This technique can be accomplished in a number of ways: A kernel level security agent installed on a host machine ensures that the driver associated with the agent is first in the initialization order. A dependent DLL associated with the driver is configured to be processed before other dependent DLLs and executes a number of operations to ensure the driver associated with the security agent is initialized first, Kernel components can be signed by a certificate obtained by a third party to verify the source of the component and whether it has been modified. When signed, the component will include a signature block implemented as a hash value of the component header and can also include a certificate chain. The signature and certificate data are typically added before the kernel component is distributed to the public.;The private keys to sign certificates as reputable companies have been stolen in the past -- in cases such as where certificates from Adobe, Realtek, and JMicron have been used to sign malicious executables. Trusted Root Certificate Authorities have been compromised, yielding the ability to use the compromised keys to generate certificates with an arbitrary company name. It may not be difficult for an attacker to start an organization which can obtain a signed certificate.;None;None
D3-PSEP Process Segment Execution Prevention;Preventing execution of any address in a memory region other than the code segment.;During execution of a process, the instruction pointer register should only point to addresses in a code segment (also called the .text segment), as this is the sole segment which should contain program code. When this technique detects an attempt to execute something that has been designated as non-executable, other techniques such as those in Process Eviction might be invoked, such as Process Termination to end the current process, or Executable Blacklisting to blacklist the potentially vulnerable or malfunctioning executable.;Non-hardware process data segment execution prevention is more susceptible to being able to be turned off for a page of memory. Different implementations of this defense have been in place since the 1980s, but implementation stalled when larger 16-bit programs began stuffing code in the segments usually reserved for data. Many modern programs follow the best practice of separation of code and data, are able to run under this defense. ROP or ret2libc/return-to-function attacks could bypass this defense, as although they may pass attacker-controlled data or stack frames to a function, they abuse functions that are legitimately located in the .text segment (code segment) of the program. For those, more advanced defenses such as a table of valid jump addresses, function call analysis, or return depth analysis could be used.;None;None
D3-SPP Strong Password Policy;Modifying system configuration to increase password strength.;Password strength guidelines include increasing password length, permitting passwords that contain ASCII or Unicode characters, and requiring systems to screen new passwords against lists of commonly used or compromised passwords.;Extremely complex password requirements may lead users to saving passwords in text files or picking obvious passwords that meet the policy.;None;None
D3-OTP One-time Password;A one-time password is valid for only one user authentication.;When a user initiates authentication, they are asked for a one-time password, often in addition to other credentials such as a traditional password or smart card. The one-time password may be from a list provided in advance, sent via a channel such as SMS or HTTPS to an app, or a generated token. In the case of a physical token which generates one-time passwords incrementally based on time elapsed, that token device need not be connected to the internet. In different implementations, an administrator of the system, or a user with additional verification, can adjust for clock skew between the token and the verification system as needed.;Compromise of delivery channel: SIM Swapping, Secure token visual compromise, Insecure delivery channel, Compromise of delivery device. Physical loss of One-time Password device. Compromise of long-term backup codes: These are often provided in the form of a downloadable document with a regular name, which can be searched for in the case that the user forgets where they put them. This digital file or printed document could be stolen. Additionally, after the code file is printed, it could be recovered from the system printer spool unless the spooler cache is cleared.;None;None
D3-BDI Broadcast Domain Isolation;Broadcast isolation restricts the number of computers a host can contact on their LAN.;Software Defined Networking, or other network encapsulation technologies intercept host broadcast traffic then route it to a specified destination per a configured policy. This can be implemented within hypervisors, networking hardware (WAPs, switches, routers), or virutal hardware.;This technique is highly dependent on network infrastructure and networking requirements.;None;None
D3-EAL Executable Allowlisting;Using a digital signature to authenticate a file before opening.;This technique is generic and there are numerous ways to compute and authenticate digital signatures. A digital certificate is generated from a private/public key pair issued by a certificate authority (CA). A hash of the file is encrypted using the private key. When the file is downloaded by another user, the user's system uses the public key to decrypt the hash and a new hash is created of the downloaded file. The hash decrypted by the public key is compared to the new hash and if there is a mismatch, further techniques, such as file deletion, file quarantine, or Executable Blacklisting may be invoked. This technique may be invoked when deciding whether to execute a file.;Organizations which download or create high volumes of software make management complex, in particular engineering or scientific organizations.;None;None
D3-EDL Executable Denylisting;Blocking the execution of files on a host in accordance with defined application policy rules.;A policy-enforcing application can register an application for denylisting based on conditions including the following: File Attributes, File malware scan, User-File combination. This may be done to prevent execution of applications which are: an old Version with known vulnerabilities, wknown Trojan hrorse programs, a match to the hash of other known malware.System Administrators will customize the rules for the given Environment;If denylisting is done by filename, filepath, or hash, these mechanisms may be a worthy first line of defense and detection, but could still be evaded by an attacker.;None;On a Windows machine the Windows Defender Application Control (WDAC) policy enforcement is run in the kernel and allows for restricting applications.
D3-IOPR IO Port Restriction;Limiting access to computer input/output (IO) ports to restrict unauthorized devices.;Software-based restriction uses agent software installed on a computer system. The agent software monitors all IO port system traffic. The agent software is configurable to limit the use of certain devices connected to IO ports. The restriction software can also be configured to limit the access to files and applications on external storage devices connected to IO ports. Hardware-based restriction can also be employed to limit access to IO ports. For example, a hardware USB filter device that is placed between the host system and the external devices can filter IO port connections based on configurable rules. When new devices are connected to the USB filter the type of device is determined. Using an allow list a connection determination is made for the device. Some implementations detect when a device is connected in order to authorize the connection against a list of approved devices, in some cases by device type. For example, if the device is determined to be a storage device, then the contained files and executables are examined to more accurately identify the device type.;Agent software will need to be installed on host Systems;None;None
D3-AL Account Locking;Ensuring the integrity of drivers loaded during initialization of the operating system.;A kernel level security agent installed on a host machine ensures that the driver associated with the agent is first in the initialization order. A dependent DLL associated with the driver is configured to be processed before other dependent DLLs and executes a number of operations to ensure the driver associated with the security agent is initialized first.;Trusted Root Certificate Authorities have been compromised, yielding the ability to use the compromised keys to generate certificates with an arbitrary company name.;None;None
D3-ANET Authentication Event Thresholding;Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.;Authentication event data is collected (logon information such as device id, time of day, day of week, geo-location, etc.) to create an activity baseline. Then, a threshold is determined either through a manually specified configuration, or a statistical analysis of deviations in historical data. New authentication events are evaluated to determine if a threshold is exceeded. Thresholds can be static or dynamic.;This technique covers statistical outliers. Though depending on the complexity or dimensionality of the data considered, outliers may not be obvious to a human analyst reviewing events in simplistic analytic views. If the malicious activity is not statistically different from benign activity, an alert threshold will not be met.;None;None
D3-AZET Authorization Event Thresholding;Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.;Authorization event data is collected to create a baseline user profile. Authorization events that deviate from the baseline and exceed a static or dynamic threshold are identified for further action. Authorization events can include successful and failed authorization attempts as well as events related to permissions including viewing, editing, deleting, creating files, databases etc.;Depending on the complexity of the data considered, outliers may not be obvious to a human analyst reviewing events in simplistic analytic views. If malicious activity is not statistically different from benign activity, an alert threshold will not be met.;None;None
D3-JFAPA Job Function Access Pattern Analysis;Detecting anomalies in user access patterns by comparing user access activity to behavioral profiles that categorize users by role such as job title, function, department.;Peer group analysis identifies functionally similar groups of actors (users or resources) based on categorizations such as job title, organizational hierarchy, or other attribute that indicates similarity of job function. Current user access activity is then compared to the appropriate peer group behavior profile to identify anomalies.;Potential for false positives from anomalies that are not associated with malicious activity.;None;None
D3-RAPA Resource Access Pattern Analysis;Analyzing the resources accessed by a user to identify unauthorized activity.;This technique analyzes a user's resource accesses by comparing the user's recent activity against a baseline activity model. Major differences between the current activity and the baseline model might indicate unauthorized activity if they are severe enough.;Potential for false positives from anomalies that are not associated with malicious activity.;None;None
D3-SDA Session Duration Analysis;Analyzing the duration of user sessions in order to detect unauthorized activity.;Detecting unauthorized user sessions by comparing the duration of a user logon session with a baseline behavior model. The behavior model comprises historical user session duration times. Abnormalities between session duration and the behavior model may indicate suspicious activity.;Potential for false positives from anomalies that are not associated with malicious activity.;None;None
D3-UDTA User Data Transfer Analysis;Analyzing the amount of data transferred by a user.;Unusual data transfer activity may indicate unauthorized activity. Data transfers can be analyzed by collecting network traffic or application logs.;There is a potential for false positives from anomalies that are not associated with unauthorized activity.;None;None
D3-UGLPA User Geolocation Logon Pattern Analysis;Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.;Geolocation data for each user logon attempt is collected and used to create a baseline user behavior profile. Current geolocation logon data is then compared against the user behavior profile. Logon activity that deviates from normal patterns and can help in identifying situations that may be indicative of a remote attacker using stolen credentials. For example: logons from locations that are different from where a user usually logs in;Potential for false positives from logon anomalies that are not associated with malicious activity.;None;None
D3-WSAA Web Session Activity Analysis;Monitoring changes in user web session behavior by comparing current web session activity to a baseline behavior profile or a catalog of predetermined malicious behavior.;User web session data is collected over a period of time to create a user behavior profile. Data collected includes clicks made on a website, average time between clicks, filling out web forms, order in which pages are viewed, and downloading files. Current user web session behavior is then compared against the use behavior profile to identify anomalies and a likelihood that the current user web session is malicious. Current user web session behavior can also be compared to predetermined known malicious behavior profiles that are developed through analysis of malware in run time at a threat research facility.;Attackers may not differentiate their web session activity enough to trigger an alert.;None;None
D3-MENCR Message Encryption;Encrypting a message body using a cryptographic key.;Asymmetric Crypto: Asymmetric encryption is typically accomplished using public and private key certificates based on the X.509 standard. The sender encrypts messages using the recipient's public key and the receipt decrypts the message using their private key. Standards that can be used to implement message encryption include S/MIME (Secure/Multipurpose Internet Mail Extensions) and PGP. Symmetric Crypto: Symmetric encryption uses the same cryptographic key by both the sender and receiver to encrypt and decrypt a message. Asymmetric key exchange protocols such as Diffie-Hellman can be used to share the cryptographic key with the recipient.;Separate configuration settings to enable message encryption are often needed for each messenger client (e.g. webmail, desktop client, mobile), Continuous monitoring to ensure private keys are not compromised and the certificate authority (CA) is trusted, Secure transfer of private keys between multiple devices.;None;None
D3-HBPI Hardware-based Process Isolation;Preventing one process from writing to the memory space of another process through hardware based address manager implementations.;Process isolation, in this context, is address space separation controlled by a security function that limits the communication between processes so that one process cannot directly modify the executing code of another process. Hardware process isolation is commonly implemented through Direct Memory Access (DMA) which collaborates with a Memory Management Unit (MMU), or Input-Output Memory Management Unit (IOMMU). These hardware controls are deployed directly on processors to aid hosts or enclaves in process isolation.;Private hosts may be vulnerable to DMA attack if they have a PCI or PCI Express port that connects attached devices directly to physical address space.;Intel Virtualization Technology for Directed I/O (Intel VT-d), Firecracker;None
D3-SBV Service Binary Verification;Analyzing changes in service binary files by comparing to a source of truth.;System service applications may originate from the operating system installation or third-party applications installed with administrative privileges. These services have an entry point of some executable file-- a binary or a script. Attackers sometimes modify these executables to launch their own code. Analyzing changes in these files may uncover unauthorized activity.;These files change for legitimate reasons when the system or software updates.;None;None
D3-TBI TPM Boot Integrity;Assuring the integrity of a platform by demonstrating that the boot process starts from a trusted combination of hardware and software and continues until the operating system has fully booted and applications are running. Sometimes called Static Root of Trust Measurement (STRM).;During the boot process, the BIOS boot block (which with this defense enabled, is the Core Root of Trust for Measurement) measures boot components (firmware, ROM). The TPM hashes those measurements and stores the hashes in Platform Configuration Registers (PCRs). Upon a subsequent boot, these hashes are provided to a verifier which compares the stored measurements to the new boot measurements. Integrity of the boot components is assured if they match.;The TPM does not perform the follow-on actions of acting on the PCR value information, it just provides the PCR stored Information.;None;None
D3-DA Dynamic Analysis;"Executing or opening a file in a synthetic ""sandbox"" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.";Analyzing the interaction of a piece of code with a system while the code is being executed in a controlled environment such as a sandbox, virtual machine, or simulator. This exposes the natural behavior of the piece of code without requiring the code to be disassembled.;Malware often detects a fake environment, then changes its behavior accordingly. For example, it could detect that the system clock is being sped up in an effort to get it to execute commands that it would normally only execute at a later time, or that the hardware manufacturer of the machine is a virtualization Provider, Malware can attempt to determine if it is being debugged, and change its behavior accordingly, Sometimes the malware behavior is triggered only under certain conditions (on a specific system date, after a certain time, or after it is sent a specific command) and can't be detected through a short execution in a virtual environment.;Cuckoo Sandbox;None
D3-FCR File Content Rules;Employing a pattern matching rule language to analyze the content of files.;Rules, often called signatures, are used for both generic and targeted malware detection. The rules are usually expressed in a domain specific language (DSL), then deployed to software that scans files for matches. The rules are developed and broadly distributed by commercial vendors, or they are developed and deployed by enterprise security teams to address highly targeted or custom malware. Conceptually, there are public and private rule sets. Both leverage the same technology, but they are intended to detect different types of cyber adversaries.;Patterns expressed in the DSLs range in their complexity. Some scanning engines support file parsing and normalization for high fidelity matching, others support only simple regular expression matching against raw file data. Engineers must make a trade-off in terms of: the computioonal load for scanning, and the resilence of the engine to deal with adversarial Content presented in different forms-- Content which in some cases is designed to exploit or defeat the scanning engines;YARA, ClamAV;None
D3-FH File Hashing;Employing file hash comparisons to detect known malware.;This technique requires a list of hashes to compare a file against.;Performance on large files or very large numbers of files.;None;None
D3-SSC Shadow Stack Comparisons;Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.;This technique compares the call stack stored in system memory with the shadow call stack maintained in the cache memory of the processor. Mismatches between the two are compared since a return oriented programming attack may only be able to control or spoof the call stack and not the shadow call stack. Mismatches are counted and if the number of mismatches exceeds a certain threshold it is an indication of unauthorized activity and a security response action is performed.;If the threshold for detecting a stack anomaly is low, it may not detect a return-oriented attack with just one gadget, such as a return-to-libc or return-to-plt attack. Additionally, this technique may not detect JOP (Jump-oriented programming), as the return instruction is not executed.;None;None
D3-SSC Shadow Stack Comparisons;Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.;This technique compares the call stack stored in system memory with the shadow call stack maintained in the cache memory of the processor. Mismatches between the two are compared since a return oriented programming attack may only be able to control or spoof the call stack and not the shadow call stack. Mismatches are counted and if the number of mismatches exceeds a certain threshold it is an indication of unauthorized activity and a security response action is performed.;If the threshold for detecting a stack anomaly is low, it may not detect a return-oriented attack with just one gadget, such as a return-to-libc or return-to-plt attack. Additionally, this technique may not detect JOP (Jump-oriented programming), as the return instruction is not executed.;None;None
D3-ACH Application Configuration Hardening;Modifying an application's configuration to reduce its attack surface.;Application configuration settings can be configured to limit the permissions on an application or disable certain vulnerable application features. Hardening an application's configuration involves analyzing not only the application but also the environment in which the application is run in for potential vulnerabilities.;None;None;None
D3-CP Certificate Pinning;Persisting either a server's X.509 certificate or their public key and comparing that to server's presented identity to allow for greater client confidence in the remote server's identity for SSL Connections;Pinning allows for a trusted copy of a certificate or public key to be associated with a server and thus reducing the likelihood of frequently visited sites being subjected to man-in-the-middle attacks. Certificates or public keys can be pinned after a trusted connection has been established or the pinning can be preloaded in an application, which is the preferred method for mobile applications. Pinning can take the form of certificate pinning or public key printing;With pinned certificates whenever a server updates its certificate, the pinned certificates will also need to be updated;None;None
